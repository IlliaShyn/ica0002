- name: my.conf backup template
  ansible.builtin.template:
    src: .mybackup.cnf.j2
    dest: /home/backup/.my.cnf
    mode: '0600'
    owner: backup
    group: backup
  no_log: true

- name: install mysql
  ansible.builtin.apt:
    name: 
      - mysql-server
      - python3-pymysql
    state: present

- name: mysql service is started
  ansible.builtin.service:
    name: mysql
    state: started
    enabled: true
     
- name: mysql override.cnf
  ansible.builtin.template:
    dest: /etc/mysql/mysql.conf.d/override.cnf
    src: override.cnf.j2
  notify: Restart MySQL

- name: create database
  community.mysql.mysql_db:
    name: "{{ mysql_database }}"
    login_unix_socket: /var/run/mysqld/mysqld.sock
  notify:
    - Reset MySQL source
    - Reset MySQL replica

- name: Create directory
  ansible.builtin.file:
    path: /var/lib/prometheus
    state: directory
  
- name: MySQL user
  community.mysql.mysql_user:
    name: "{{ mysql_user }}"
    password: "{{ mysql_password }}"
    host: "%"
    priv: "{{ mysql_database }}.*:ALL"
    login_unix_socket: /var/run/mysqld/mysqld.sock
  no_log: true

- name: Install Mysql exporter
  ansible.builtin.apt:
    name: prometheus-mysqld-exporter
    state: present

- name: MySQL exporter user
  community.mysql.mysql_user:
    name: "{{ exporter_user }}"
    password: "{{ exporter_password }}"
    priv: "*.*:PROCESS,REPLICATION CLIENT,SELECT"
    login_unix_socket: /var/run/mysqld/mysqld.sock
  notify: Restart Exporter
  no_log: true

- name: my.conf template
  ansible.builtin.template:
    src: .my.conf.j2
    dest: /var/lib/prometheus/.my.cnf
    mode: '0600'
    owner: prometheus
  no_log: true
  notify: 
    - Restart Exporter
    - sleep 10

- meta: flush_handlers

- name: mysql exporter is running
  ansible.builtin.service:
    name: prometheus-mysqld-exporter
    state: started
    enabled: yes

- name: backup mysql directory
  ansible.builtin.file:
    path: /home/backup/mysql
    state: directory
    owner: backup
    mode: '0700'

- name: Mysql backup user
  community.mysql.mysql_user:
    name: "{{ backup_user }}"
    password: "{{ backup_password }}"
    priv: "{{ mysql_database }}.*:LOCK TABLES,SELECT"
    login_unix_socket: /var/run/mysqld/mysqld.sock
  no_log: true

- name: Create replication user
  community.mysql.mysql_user:
    name: "{{ mysql_replication_user }}"
    password: "{{ mysql_replication_password }}"
    host: "%"
    priv: "*.*:REPLICATION SLAVE"
    login_unix_socket: /var/run/mysqld/mysqld.sock
  no_log: true

- community.mysql.mysql_variables:
    variable: read_only
    value: "{{ 'OFF' if inventory_hostname == mysql_host else 'ON' }}"
    mode: persist
    login_unix_socket: /var/run/mysqld/mysqld.sock
  notify:
    - Reset MySQL source
    - Reset MySQL replica

- name: Make cron backupdump
  ansible.builtin.template:
    src: cron_backup.conf.j2
    dest: /etc/cron.d/mysql-backup
  notify: Cron restart

- name: Set CNAME record for mysql
  community.general.nsupdate:
    key_name: "nsupdate.key"
    key_algorithm: "hmac-sha256"
    key_secret: "{{ dns_update_key }}"
    server: "{{hostvars[groups['dns_primary'][0]]['ansible_default_ipv4']['address']}}"
    zone: "{{ startup_name }}"
    record: "db-{{ item | replace('IlliaShyn-', '') }}"
    value: "{{ item }}"
    type: "CNAME"
  with_items: "{{ groups['dns_servers'] }}"




  